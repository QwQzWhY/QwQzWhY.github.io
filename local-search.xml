<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CF765C Table Tennis Game 2 题解</title>
    <link href="/2023/08/23/CF765C-Table-Tennis-Game-2-%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/08/23/CF765C-Table-Tennis-Game-2-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="solution">Solution</h2><p>注意到题目中的一句话<code>Note that the game consisted of several complete sets.</code>，即每一局都是完整的一局，由此我们可以得出三种无解情况：</p><ol type="1"><li>Misha 的得分和 Vanya 的得分都小于 <spanclass="math inline">\(k\)</span></li><li>Misha 的得分无法赢整数轮且 Vanya 的得分小于 <spanclass="math inline">\(k\)</span></li><li>Vanya 的得分无法赢整数轮且 Misha 的得分小于 <spanclass="math inline">\(k\)</span></li></ol><p>容易想到有解时答案即为 $ak + bk $。</p><h2 id="code">Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> For(i,a,b) for(int i=(a);i&lt;=(b);i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOR(i,a,b) for(int i=(a);i&gt;=(b);i--)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IOS ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)</span><br><br><span class="hljs-type">int</span> k,A,B;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>IOS;<br>cin&gt;&gt;k&gt;&gt;A&gt;&gt;B;<br><span class="hljs-keyword">if</span>(A&lt;k &amp;&amp; B&lt;k)<span class="hljs-keyword">return</span> cout&lt;&lt;<span class="hljs-string">&quot;-1&quot;</span>,<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(A%k!=<span class="hljs-number">0</span> &amp;&amp; B&lt;k)<span class="hljs-keyword">return</span> cout&lt;&lt;<span class="hljs-string">&quot;-1&quot;</span>,<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(B%k!=<span class="hljs-number">0</span> &amp;&amp; A&lt;k)<span class="hljs-keyword">return</span> cout&lt;&lt;<span class="hljs-string">&quot;-1&quot;</span>,<span class="hljs-number">0</span>;<br>cout&lt;&lt;A/k+B/k;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷 P9573 「TAOI-2」核心共振 题解</title>
    <link href="/2023/08/22/%E6%B4%9B%E8%B0%B7-P9573-%E3%80%8CTAOI-2%E3%80%8D%E6%A0%B8%E5%BF%83%E5%85%B1%E6%8C%AF-%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/08/22/%E6%B4%9B%E8%B0%B7-P9573-%E3%80%8CTAOI-2%E3%80%8D%E6%A0%B8%E5%BF%83%E5%85%B1%E6%8C%AF-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="solution">Solution</h2><p>很容易发现如果 <span class="math inline">\(p\ge 2n\)</span>时「共振」的次数一定为 <spanclass="math inline">\(0\)</span>，所以这时随便怎么输出都行。</p><p>考虑一般情况。</p><p>首先为 <span class="math inline">\(p\)</span>的倍数的数肯定无法与其他不是 <span class="math inline">\(p\)</span>的倍数的数组，所以先输出是 <span class="math inline">\(p\)</span>的倍数的数。</p><p>然后可以想到只需要枚举一个 <span class="math inline">\(i\)</span>表示余数，发现只需要枚举 <span class="math inline">\(1\)</span> 到 <spanclass="math inline">\(p\div 2\)</span>就行（因为要两两余数配对），然后从 <spanclass="math inline">\(i\)</span> 开始，每次加 <spanclass="math inline">\(p\)</span> 保证余数不变，然后判断这个数有没有超<spanclass="math inline">\(n\)</span>，如果没有就输出，然后再判断与之余数相对应的数，容易想到（假设这个数为<span class="math inline">\(j\)</span>）对应的数即为 <spanclass="math inline">\(j-i+p-i\)</span>，然后和 <spanclass="math inline">\(j\)</span> 一样的判断即可。</p><p>注意如果 <span class="math inline">\(i=p-i\)</span> 时不用考虑 <spanclass="math inline">\(j\)</span> 对应的数，因为 <spanclass="math inline">\(j\)</span> 对应的数的余数也是 <spanclass="math inline">\(i\)</span>​。</p><p>可以证明不会有遗漏的数。</p><h2 id="code">Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> For(i,a,b) for(int i=(a);i&lt;=(b);i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOR(i,a,b) for(int i=(a);i&gt;=(b);i--)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IOS ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)</span><br><br><span class="hljs-type">int</span> n,p;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;p;<br><span class="hljs-keyword">if</span>(p&gt;=<span class="hljs-number">2</span>*n)&#123;<span class="hljs-built_in">For</span>(i,<span class="hljs-number">1</span>,n)cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;cout&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-keyword">return</span> ;&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=p;i&lt;=n;i+=p)cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">1</span>,p/<span class="hljs-number">2</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;=n;j+=p)<br>&#123;<br>cout&lt;&lt;j&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-keyword">if</span>(i!=p-i)<br><span class="hljs-keyword">if</span>(j+p<span class="hljs-number">-2</span>*i&lt;=n)<br>cout&lt;&lt;j-i+p-i&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>IOS;<br><span class="hljs-type">int</span> T;cin&gt;&gt;T;<br><span class="hljs-keyword">while</span>(T--)<span class="hljs-built_in">solve</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷 P9548 「PHOI-1」雨纷纷 题解</title>
    <link href="/2023/08/17/%E6%B4%9B%E8%B0%B7-P9548-%E3%80%8CPHOI-1%E3%80%8D%E9%9B%A8%E7%BA%B7%E7%BA%B7-%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/08/17/%E6%B4%9B%E8%B0%B7-P9548-%E3%80%8CPHOI-1%E3%80%8D%E9%9B%A8%E7%BA%B7%E7%BA%B7-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="solution">Solution</h2><p>很容易想到如果 <span class="math inline">\(n\)</span> 为 <spanclass="math inline">\(x\)</span> 的倍数且 <spanclass="math inline">\(m\)</span> 为 <spanclass="math inline">\(y\)</span> 的倍数时只需要在每个 <spanclass="math inline">\(x\times y\)</span> 的矩形里撒一个点即可。</p><p>考虑不为倍数时的情况。</p><p>如下图：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/QwQzWhY/blogimg/202308172012665.jpg" /></p><p>只需在 <span class="math inline">\(n\)</span> 不为 <spanclass="math inline">\(x\)</span> 倍数时多撒一个点，<spanclass="math inline">\(m\)</span> 不为 <spanclass="math inline">\(y\)</span> 倍数时再多撒一个点即可。</p><h2 id="code">Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> For(i,a,b) for(int i=(a);i&lt;=(b);i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOR(i,a,b) for(int i=(a);i&gt;=(b);i--)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IOS ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><br><span class="hljs-type">int</span> n,m,x,y,k;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>IOS;<br>cin&gt;&gt;n&gt;&gt;m&gt;&gt;x&gt;&gt;y&gt;&gt;k;<br><span class="hljs-type">int</span> sum=(n/x)*(m/y)<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">if</span>(n%x!=<span class="hljs-number">0</span>)sum++;<br><span class="hljs-keyword">if</span>(m%y!=<span class="hljs-number">0</span>)sum++;<br>cout&lt;&lt;(sum<span class="hljs-number">-1</span>)/k+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;sum;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷 P7767 DNA 题解</title>
    <link href="/2023/08/17/%E6%B4%9B%E8%B0%B7-P7767-COCI-2011-2012-5-DNA-%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/08/17/%E6%B4%9B%E8%B0%B7-P7767-COCI-2011-2012-5-DNA-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="solution">Solution</h2><p>考虑 DP。</p><p>设 <span class="math inline">\(dp_{i,0}\)</span> 表示前 <spanclass="math inline">\(i\)</span> 个字符全为 <code>A</code>的最小操作次数，<span class="math inline">\(dp_{i,1}\)</span> 表示前<span class="math inline">\(i\)</span> 个数全为 <code>B</code>的最小操作次数。</p><p>考虑转移。</p><p>若当前位为 <code>A</code> 则 <spanclass="math inline">\(dp_{i,0}=\min(dp_{i-1,0},dp_{i-1,1}+1)\)</span>，<spanclass="math inline">\(dp_{i,1}=\min(dp_{i-1,0}+1,dp_{i-1,1}+1)\)</span>；</p><p>若当前位为 <code>B</code> 时同理。</p><p>最后输出 <spanclass="math inline">\(\min(dp_{n,0},dp_{n,1}+1)\)</span> 即可。</p><h2 id="code">Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> For(i,a,b) for(int i=(a);i&lt;=(b);i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOR(i,a,b) for(int i=(a);i&gt;=(b);i--)</span><br><span class="hljs-keyword">namespace</span> IO<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">register</span> <span class="hljs-type">int</span> x=<span class="hljs-number">0</span>,f=<span class="hljs-number">0</span>;<span class="hljs-keyword">register</span> <span class="hljs-type">char</span> ch=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span>(ch&lt;<span class="hljs-string">&#x27;0&#x27;</span> || ch&gt;<span class="hljs-string">&#x27;9&#x27;</span>)f|=ch==<span class="hljs-string">&#x27;-&#x27;</span>,ch=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+(ch^<span class="hljs-number">48</span>),ch=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f?-x:x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">min</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> x&lt;y?x:y;&#125;<br>&#125;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> IO;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> n,dp[N][<span class="hljs-number">2</span>];<br>string S;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;S;<br>S=<span class="hljs-string">&quot; &quot;</span>+S;<br><span class="hljs-comment">// dp[i][0] i,A</span><br><span class="hljs-comment">// dp[i][1] i,B</span><br><span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0x3ffffff</span>,<span class="hljs-built_in">sizeof</span>(dp));<br><span class="hljs-keyword">if</span>(S[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;A&#x27;</span>)dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>,dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>,dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">2</span>,n)<br><span class="hljs-keyword">if</span>(S[i]==<span class="hljs-string">&#x27;A&#x27;</span>)dp[i][<span class="hljs-number">0</span>]=<span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>],dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>),dp[i][<span class="hljs-number">1</span>]=<span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>,dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">else</span> dp[i][<span class="hljs-number">0</span>]=<span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>,dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>),dp[i][<span class="hljs-number">1</span>]=<span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>,dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]);<br>cout&lt;&lt;<span class="hljs-built_in">min</span>(dp[n][<span class="hljs-number">0</span>],dp[n][<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF1278B A and B 题解</title>
    <link href="/2023/08/17/CF1278B-A-and-B-%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/08/17/CF1278B-A-and-B-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="solution">Solution</h2><p>对样例换一种方式解释。</p><p>样例 <span class="math inline">\(1\)</span>：</p><p><span class="math inline">\(a=1,b=3\to a=1+2,b=3\)</span></p><p>此时相等，故最小操作数为 <span class="math inline">\(2\)</span>。</p><p>样例 <span class="math inline">\(2\)</span> 不用解释。</p><p>样例 <span class="math inline">\(3\)</span>：</p><p><span class="math inline">\(a=30,b=20\toa=30,b=20+1+2+3+4\)</span></p><p>此时相等，故最小操作次数为 <spanclass="math inline">\(4\)</span>。</p><p>这些样例不明确，再构造一组样例：</p><p><span class="math inline">\(a=5,b=22\toa=5+1+2+3+4+5+6=26&gt;b=22\)</span></p><p>此时注意到若将 <span class="math inline">\(a\)</span> 中的 <spanclass="math inline">\(2\)</span> 转移到 <spanclass="math inline">\(b\)</span> 上即可使 <spanclass="math inline">\(a=b\)</span>。</p><p>再构造一组样例：</p><p><span class="math inline">\(a=5,b=23\toa=5+1+2+3+4+5+6=26&gt;b=23\)</span></p><p>发现无法将 <span class="math inline">\(a\)</span>多出的部分均分，此时考虑继续加直至可以均分（可以证明最多加两次），然后多出部分均分即可。</p><p>推广至所有情况，发现只需使 <span class="math inline">\(a\)</span> 和<span class="math inline">\(b\)</span> 的差值小于 <spanclass="math inline">\(0\)</span>（假设 <spanclass="math inline">\(a&lt;b\)</span>，即要使 <spanclass="math inline">\(a-b&gt;0\)</span>）和差值为偶数即可。</p><h2 id="code">Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> For(i,a,b) for(int i=(a);i&lt;=(b);i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOR(i,a,b) for(int i=(a);i&gt;=(b);i--)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IOS ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)</span><br><br><span class="hljs-type">int</span> a,b;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;a&gt;&gt;b;<br><span class="hljs-type">int</span> c=<span class="hljs-built_in">abs</span>(a-b);<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(sum&lt;c || <span class="hljs-built_in">abs</span>(sum-c)%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)sum+=(++i);<br>cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>IOS;<br><span class="hljs-type">int</span> T;cin&gt;&gt;T;<br><span class="hljs-keyword">while</span>(T--)<span class="hljs-built_in">solve</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF1393B Applejack and Storages 题解</title>
    <link href="/2023/08/17/CF1393B-Applejack-and-Storages-%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/08/17/CF1393B-Applejack-and-Storages-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="solution">Solution</h2><p>注意到能拼出时必须要存在 <span class="math inline">\(2\)</span>组及以上的四个相同的木棍，或者 <span class="math inline">\(1\)</span>组及以上的四个相同的木棍和<strong>除此之外</strong>的 <spanclass="math inline">\(2\)</span> 组及以上的两个相同的木棍。</p><p>同时又注意到 <span class="math inline">\(a_i\)</span>很小，所以可以用桶统计，同时实时更新四个相同木棍的组数和两个相同木棍的组数即可。</p><h2 id="code">Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> For(i,a,b) for(int i=(a);i&lt;=(b);i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOR(i,a,b) for(int i=(a);i&gt;=(b);i--)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IOS ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>;<br><span class="hljs-type">int</span> n,t[N+<span class="hljs-number">4</span>],_4,_2;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> ch;<span class="hljs-type">int</span> x;cin&gt;&gt;ch&gt;&gt;x;<br><span class="hljs-comment">// cout&lt;&lt;ch&lt;&lt;&quot;\n&quot;;</span><br><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;+&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">if</span>((t[x]+<span class="hljs-number">1</span>)/<span class="hljs-number">4</span>&gt;t[x]/<span class="hljs-number">4</span>)_4++;<br><span class="hljs-keyword">if</span>((t[x]+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>&gt;t[x]/<span class="hljs-number">2</span>)_2++;<br><span class="hljs-keyword">if</span>(_4&gt;=<span class="hljs-number">2</span> || (_4&gt;=<span class="hljs-number">1</span> &amp;&amp; _2&gt;=<span class="hljs-number">4</span>))cout&lt;&lt;<span class="hljs-string">&quot;YES\n&quot;</span>;<span class="hljs-comment">// 注意这里的 _2 要 &gt;=4，因为 _4 的那一组不能算上，准确写应为 _2-2&gt;=2。下同。</span><br><span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;NO\n&quot;</span>;<br>t[x]++;<br>&#125;<br><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;-&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">if</span>((t[x]<span class="hljs-number">-1</span>)/<span class="hljs-number">4</span>&lt;t[x]/<span class="hljs-number">4</span>)_4--;<br><span class="hljs-keyword">if</span>((t[x]<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>&lt;t[x]/<span class="hljs-number">2</span>)_2--;<br><span class="hljs-keyword">if</span>(_4&gt;=<span class="hljs-number">2</span> || (_4&gt;=<span class="hljs-number">1</span> &amp;&amp; _2&gt;=<span class="hljs-number">4</span>))cout&lt;&lt;<span class="hljs-string">&quot;YES\n&quot;</span>;<br><span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;NO\n&quot;</span>;<br>t[x]--;<br>&#125;<br><span class="hljs-comment">// cout&lt;&lt;_4&lt;&lt;&quot; &quot;&lt;&lt;_2&lt;&lt;&quot;\n&quot;;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>IOS;<br>cin&gt;&gt;n;<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">1</span>,n)&#123;<span class="hljs-type">int</span> x;cin&gt;&gt;x;t[x]++;&#125;<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">1</span>,N)_4+=(t[i]/<span class="hljs-number">4</span>),_2+=(t[i]/<span class="hljs-number">2</span>);<br><span class="hljs-type">int</span> q;cin&gt;&gt;q;<br><span class="hljs-keyword">while</span>(q--)<span class="hljs-built_in">solve</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF982C Cut &#39;em all! 题解</title>
    <link href="/2023/08/17/CF982C-Cut-em-all-%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/08/17/CF982C-Cut-em-all-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="solution">Solution</h2><p>容易想到如果 <span class="math inline">\(n\)</span>为奇数，一定不可以（因为奇数不管怎么拆分成偶数总会剩下一个奇数），所以输出直接判定无解。</p><p>接下来只用考虑 <span class="math inline">\(n\)</span>为偶数的情况。</p><p>题目要求要使每一颗森林中的树的大小要为偶数，即儿子数（自己也要算上）为偶数的节点均可删除其与父亲节点的连边使得构造出的树的大小为偶数。</p><p>所以只需要 DFS 预处理儿子数，然后统计有多少个偶数即可。</p><p>注意根节点不能算，因为它没有父亲节点。</p><h2 id="code">Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> For(i,a,b) for(int i=(a);i&lt;=(b);i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOR(i,a,b) for(int i=(a);i&gt;=(b);i--)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IOS ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> n,sontot[N],ans;<br><span class="hljs-type">bool</span> vis[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; E[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>sontot[x]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:E[x])<br><span class="hljs-keyword">if</span>(vis[i]==<span class="hljs-number">0</span>)<br>&#123;<br>vis[i]=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">dfs</span>(i);<br>sontot[x]+=sontot[i];<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>IOS;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> cout&lt;&lt;<span class="hljs-string">&quot;-1&quot;</span>,<span class="hljs-number">0</span>;<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-type">int</span> u,v;cin&gt;&gt;u&gt;&gt;v;<br>E[u].<span class="hljs-built_in">push_back</span>(v);<br>E[v].<span class="hljs-built_in">push_back</span>(u);<br>&#125;<br>vis[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">2</span>,n)<span class="hljs-keyword">if</span>(sontot[i]%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)ans++;<br>cout&lt;&lt;ans;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF932B Recursive Queries 题解</title>
    <link href="/2023/08/17/CF932B-Recursive-Queries-%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/08/17/CF932B-Recursive-Queries-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="solution">Solution</h2><p>注意到如果 <span class="math inline">\(Q\)</span>次询问每次都去算一遍会超时。</p><p>发现 <span class="math inline">\(l\)</span> 和 <spanclass="math inline">\(r\)</span> 很小，考虑预处理，同时注意到 <spanclass="math inline">\(k\)</span> 最大不会超过 <spanclass="math inline">\(9\)</span>，所以定义 <spanclass="math inline">\(c_{i,j}\)</span> 为 <spanclass="math inline">\(1\)</span> 到 <spanclass="math inline">\(i\)</span> 中 <spanclass="math inline">\(g_i\)</span> 为 <spanclass="math inline">\(k\)</span> 的个数，预处理所有的 <spanclass="math inline">\(c\)</span> 即可。</p><p>明显不会超时。</p><h2 id="code">Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> For(i,a,b) for(int i=(a);i&lt;=(b);i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOR(i,a,b) for(int i=(a);i&gt;=(b);i--)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IOS ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>;<br><span class="hljs-type">int</span> l,r,k,f[N+<span class="hljs-number">4</span>],g[N+<span class="hljs-number">4</span>],c[N+<span class="hljs-number">4</span>][<span class="hljs-number">11</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pow</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> s=x;<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">2</span>,y)s*=x;<br><span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;l&gt;&gt;r&gt;&gt;k;<br>cout&lt;&lt;c[r][k]-c[l<span class="hljs-number">-1</span>][k]&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>f[<span class="hljs-number">0</span>]=g[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>)f[i]=g[i]=i;<br><span class="hljs-built_in">For</span>(w,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>)<br><span class="hljs-built_in">For</span>(i,<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>,w<span class="hljs-number">-1</span>),<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>,w)<span class="hljs-number">-1</span>)<br>&#123;<br>f[i]=f[i%<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>,w<span class="hljs-number">-1</span>)]*(i/<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>,w<span class="hljs-number">-1</span>));<br>g[i]=g[f[i]];<br>&#125;<br>f[N]=f[N%<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>)]*(N/<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>));<br>g[N]=g[f[N]];<br><span class="hljs-built_in">For</span>(k,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>)<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">1</span>,N)<br><span class="hljs-keyword">if</span>(g[i]==k)c[i][k]=c[i<span class="hljs-number">-1</span>][k]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> c[i][k]=c[i<span class="hljs-number">-1</span>][k];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>IOS;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-comment">// For(i,1,20)cout&lt;&lt;f[i]&lt;&lt;&quot; &quot;;cout&lt;&lt;&quot;\n&quot;;For(i,1,20)cout&lt;&lt;g[i]&lt;&lt;&quot; &quot;;cout&lt;&lt;&quot;\n&quot;;</span><br><span class="hljs-type">int</span> Q;cin&gt;&gt;Q;<br><span class="hljs-keyword">while</span>(Q--)<span class="hljs-built_in">solve</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷 P9539 「AWOI Round 2 B」树学 题解</title>
    <link href="/2023/08/17/%E6%B4%9B%E8%B0%B7-P9539-%E3%80%8CAWOI-Round-2-B%E3%80%8D%E6%A0%91%E5%AD%A6-%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/08/17/%E6%B4%9B%E8%B0%B7-P9539-%E3%80%8CAWOI-Round-2-B%E3%80%8D%E6%A0%91%E5%AD%A6-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="solution">Solution</h2><p>题目要求字典序最小，所以一定要尽可能多的 <spanclass="math inline">\(a\)</span>，而且要尽可能靠前。</p><p>所以我们只需修改不是 <span class="math inline">\(a\)</span> 的位置为<span class="math inline">\(a\)</span> 即可。</p><p>但若 <span class="math inline">\(a\)</span> 的个数比 <spanclass="math inline">\(r\)</span> 大，我们就需要将多余的 <spanclass="math inline">\(a\)</span> 手动改为 <spanclass="math inline">\(b\)</span>并在接下来的修改中保持不变，所以定义一个 <spanclass="math inline">\(vis_i\)</span> 表示是否一定不能修改。</p><p>注意这里要从后往前考虑，而修改要从前往后考虑。</p><h2 id="code">Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> For(i,a,b) for(int i=(a);i&lt;=(b);i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOR(i,a,b) for(int i=(a);i&gt;=(b);i--)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IOS ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> n,l,r;<br><span class="hljs-type">bool</span> g[N];<br>string st;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>IOS;<br>cin&gt;&gt;n&gt;&gt;l&gt;&gt;r;<br>cin&gt;&gt;st;<br><span class="hljs-type">int</span> anum=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span>(st[i]==<span class="hljs-string">&#x27;a&#x27;</span>)anum++;<br><span class="hljs-keyword">if</span>(anum&gt;r)<br>&#123;<br>l=r;<br><span class="hljs-built_in">FOR</span>(i,n<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(anum==r)<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span>(st[i]==<span class="hljs-string">&#x27;a&#x27;</span>)g[i]=<span class="hljs-number">1</span>,st[i]=<span class="hljs-string">&#x27;b&#x27;</span>,anum--;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> mnum=n-l,now=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<br><span class="hljs-keyword">if</span>(g[i]==<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(now==mnum)<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span>(st[i]!=<span class="hljs-string">&#x27;a&#x27;</span>)st[i]=<span class="hljs-string">&#x27;a&#x27;</span>,now++;<br>&#125;<br>cout&lt;&lt;st;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷 P9541 「AWOI Round 2 D」数字三角形 题解</title>
    <link href="/2023/08/17/%E6%B4%9B%E8%B0%B7-P9541-%E3%80%8CAWOI-Round-2-D%E3%80%8D%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2-%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/08/17/%E6%B4%9B%E8%B0%B7-P9541-%E3%80%8CAWOI-Round-2-D%E3%80%8D%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="solution">Solution</h2><p>通过题目意思发现，有三种情况：</p><ol type="1"><li><p>没有旋转的初始情况</p></li><li><p>旋转一次的情况</p></li><li><p>旋转两次的情况</p></li></ol><p>我们考虑怎么处理初始情况，其他情况同理。</p><p>首先，我们发现经过数和最大一定可以保证是每行的最大值的总和，所以只要计算最小的消耗就可以了。</p><p>考虑 DP，设 <span class="math inline">\(dp_{i,j}\)</span>表示从上往下走到 <span class="math inline">\(i,j\)</span>时使每行都取最大值时的最小消耗。</p><p>容易想到如果当前的数就是当前行的最大值，便可以直接从 <spanclass="math inline">\(dp_{i-1,j-1}\)</span> 和 <spanclass="math inline">\(dp_{i-1,j}\)</span> 转移过来；如果不是，则只需再加<span class="math inline">\(1\)</span>即可（因为可以调换任意两个数的位置）。</p><p>每行的最大值预处理或者动规时处理均可。</p><p>注意边界和初始值。</p><h2 id="code">Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> For(i,a,b) for(int i=(a);i&lt;=(b);i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOR(i,a,b) for(int i=(a);i&gt;=(b);i--)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IOS ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> <span class="hljs-keyword">elif</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span></span><br><span class="hljs-comment">// #define int long long</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e3</span>+<span class="hljs-number">4</span>,INF=INT_MAX;<br><span class="hljs-type">int</span> n,a[N][N],b[N][N],Maxsum,Minmagic,Max[N],dp[N][N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">work</span><span class="hljs-params">(<span class="hljs-type">int</span> sum,<span class="hljs-type">int</span> magic)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">1</span>,n)Max[i]=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">1</span>,n)<span class="hljs-built_in">For</span>(j,<span class="hljs-number">1</span>,i)dp[i][j]=INF,Max[i]=<span class="hljs-built_in">max</span>(Max[i],a[i][j]);<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">1</span>,n)sum+=Max[i];<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">1</span>,n)<br><span class="hljs-built_in">For</span>(j,<span class="hljs-number">1</span>,i)<br><span class="hljs-keyword">if</span>(a[i][j]==Max[i])dp[i][j]=<span class="hljs-built_in">min</span>(dp[i][j],<span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>,j<span class="hljs-number">-1</span>)],dp[i<span class="hljs-number">-1</span>][<span class="hljs-built_in">min</span>(i<span class="hljs-number">-1</span>,j)]));<br><span class="hljs-keyword">else</span> dp[i][j]=<span class="hljs-built_in">min</span>(dp[i][j],<span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>,j<span class="hljs-number">-1</span>)],dp[i<span class="hljs-number">-1</span>][<span class="hljs-built_in">min</span>(i<span class="hljs-number">-1</span>,j)])+<span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> Min=INF;<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">1</span>,n)Min=<span class="hljs-built_in">min</span>(Min,dp[n][i]);<br>magic+=Min;<br><span class="hljs-keyword">if</span>(sum&gt;Maxsum)Maxsum=sum,Minmagic=magic;<br><span class="hljs-built_in">elif</span>(sum==Maxsum)Minmagic=<span class="hljs-built_in">min</span>(Minmagic,magic);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>IOS;<br>cin&gt;&gt;n;<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">1</span>,n)<span class="hljs-built_in">For</span>(j,<span class="hljs-number">1</span>,i)cin&gt;&gt;a[i][j];<br><span class="hljs-built_in">work</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">1</span>,n)<span class="hljs-built_in">For</span>(j,<span class="hljs-number">1</span>,i)b[i][j]=a[i][j];<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">1</span>,n)<span class="hljs-built_in">For</span>(j,<span class="hljs-number">1</span>,i)a[i][j]=b[n+<span class="hljs-number">1</span>-j][i-j+<span class="hljs-number">1</span>];<br><span class="hljs-comment">// For(i,1,n)&#123;For(j,1,i)cout&lt;&lt;a[i][j]&lt;&lt;&quot; &quot;;cout&lt;&lt;&quot;\n&quot;;&#125;</span><br><span class="hljs-built_in">work</span>(<span class="hljs-number">0</span>,n);<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">1</span>,n)<span class="hljs-built_in">For</span>(j,<span class="hljs-number">1</span>,i)b[i][j]=a[i][j];<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">1</span>,n)<span class="hljs-built_in">For</span>(j,<span class="hljs-number">1</span>,i)a[i][j]=b[n+<span class="hljs-number">1</span>-j][i-j+<span class="hljs-number">1</span>];<br><span class="hljs-comment">// For(i,1,n)&#123;For(j,1,i)cout&lt;&lt;a[i][j]&lt;&lt;&quot; &quot;;cout&lt;&lt;&quot;\n&quot;;&#125;</span><br><span class="hljs-built_in">work</span>(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*n);<br>cout&lt;&lt;Maxsum&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;Minmagic;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
